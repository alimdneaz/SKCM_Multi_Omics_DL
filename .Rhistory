untar("./gdc_download_20250129_114355.472688.tar.gz", exdir = "gdc_data")
getwd()
untar("./gdc_download_20250129_115746.697634.tar.gz", exdir = "gdc_data")
# Importing Libraries
library(TCGAbiolinks)
library(dplyr)
library(maftools)
library(pheatmap)
library(SummarizedExperiment)
library(sesameData)
library(sesame)
# 1. Mutation and CNV data Download
query_mutation <- GDCquery(project = 'TCGA-BRCA',
data.category = 'Simple Nucleotide Variation',
access = 'open')
output_mutation <- getResults(query_mutation)
View(output_mutation)
# 1. Mutation and CNV data Download
query_mutation <- GDCquery(project = 'TCGA-SKCM',
data.category = 'Simple Nucleotide Variation',
access = 'open')
View(output_mutation)
output_mutation %>% select(data_category) %>% table()
output_mutation %>% select(type) %>% table()
output_mutation %>% select(data_type) %>% table()
## Download The data
GDCdownload(output_mutation)
output_mutation %>% select(analysis_workflow_type) %>% table()
# 1. Mutation and CNV data Download
query_mutation <- GDCquery(project = 'TCGA-SKCM',
data.category = 'Simple Nucleotide Variation',
data.type = "Masked Somatic Mutation",
access = 'open',
workflow.type = "Aliquot Ensemble Somatic Variant Merging and Masking ")
# 1. Mutation and CNV data Download
query_mutation <- GDCquery(project = 'TCGA-SKCM',
data.category = 'Simple Nucleotide Variation',
data.type = "Masked Somatic Mutation",
access = 'open',
workflow.type = "Aliquot Ensemble Somatic Variant Merging and Masking")
output_mutation <- getResults(query_mutation)
View(output_mutation)
## Download The data
GDCdownload(output_mutation)
cases <- output_mutation$cases
# 1. Mutation and CNV data Download
query_mutation <- GDCquery(project = 'TCGA-SKCM',
data.category = 'Simple Nucleotide Variation',
data.type = "Masked Somatic Mutation",
access = 'open',
workflow.type = "Aliquot Ensemble Somatic Variant Merging and Masking",
barcode = cases)
## Download The data
GDCdownload(output_mutation)
## Download The data
GDCdownload(query_mutation)
maf <- GDCprepare(query_mutation, summarizedExperiment = TRUE)
View(maf)
# maftools utils to read and create dashboard
maftools.input <- read.maf(maf)
plotmafSummary(maf = maftools.input,
addStat = 'median',
rmOutlier = TRUE,
dashboard = TRUE)
Class(maf)
class(maf)
if(!dir.exists("data")){
dir.create("data", showWarnings = F, recursive = T)
}
write.csv(maf, "mutation_data.csv")
output_mutation <- getResults(query_mutation)
write.csv(output_mutation, "/data/mutation_meta_data.csv")
if(!dir.exists("data")){
dir.create("data", showWarnings = F, recursive = T)
}
write.csv(output_mutation, "data/mutation_meta_data.csv")
dim(maf)
# Transcriptomics Data
query_TCGA <- GDCquery(project = "TCGA-BRCA",
data.category  = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
experimental.strategy = 'RNA-Seq',
workflow.type = 'STAR - Counts',
access = "open")
# Transcriptomics Data
query_transcriptom <- GDCquery(project = "TCGA-SKCM",
data.category  = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
experimental.strategy = 'RNA-Seq',
workflow.type = 'STAR - Counts',
access = "open")
output_transcriptom <- getResults(query_TCGA)
output_transcriptom <- getResults(query_transcriptom)
View(output_transcriptom)
cases_transcriptom <- output_transcriptom$cases
# Transcriptomics Data
query_transcriptom <- GDCquery(project = "TCGA-SKCM",
data.category  = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
experimental.strategy = 'RNA-Seq',
workflow.type = 'STAR - Counts',
access = "open",
barcode = cases_transcriptom)
GDCdownload(query_transcriptom)
skcm_data <- GDCprepare(query_transcriptom, summarizedExperiment = TRUE)
brca_matrix <- assay(tcga_brca_data, 'fpkm_unstrand')
library(TCGAbiolinks)
library(dplyr)
library(maftools)
library(pheatmap)
library(SummarizedExperiment)
library(sesameData)
library(sesame)
library(TCGAbiolinks)
library(dplyr)
library(maftools)
library(pheatmap)
library(SummarizedExperiment)
library(sesameData)
library(sesame)
library(TCGAbiolinks)
library(dplyr)
library(maftools)
library(pheatmap)
library(SummarizedExperiment)
library(sesameData)
library(sesame)
# Proteomics Data
query_proteomics <- GDCquery(project = "TCGA-SKCM",
data.category  = "Proteome Profiling",
data.type = "Protein Expression Quantification",
experimental.strategy = 'Reverse Phase Protein Array',
access = "open")
output_proteomics <- getResults(query_proteomics)
View(output_proteomics)
GDCdownload(query_proteomics)
proteomics.data <- GDCprepare(query_proteomics, summarizedExperiment = TRUE)
proteomics.data.asay <- assay(proteomics.data)
proteomics.data
View(proteomics.data)
View(proteomics.data)
proteomics.data.asay <- assay(proteomics.data)
proteomics.data <- GDCprepare(query_proteomics, summarizedExperiment = TRUE)
proteomics.data.asay <- assay(proteomics.data)
write.csv(output_proteomics, "./data/proteomics_data_meta_data.csv")
write.csv(proteomics.data, "./data/proteomics_data.csv")
# Checking The Meta Data Ids
meta_data_rna <- read.csv("./data/RNA_Seq_transcriptom_meta_data.csv", header= T)
meta_data_mutation <- read.csv("./data/mutation_meta_data.csv", header = T)
meta_data_transcriptom <- read.csv("./data/proteomics_data_meta_data.csv", header = T)
# Checking the ids if they match
meta_data_rna$id == meta_data_mutation$id
# Checking the ids if they match
meta_data_rna$id == meta_data_mutation$id %>% sum()
# Checking the ids if they match
sum(meta_data_rna$id == meta_data_mutation$id)
# Checking the ids if they match
ranaids <- meta_data_rna$id
mutationids <- meta_data_mutation$id
transcriptids <- meta_data_transcriptom$id
for(ids in ranaids){
print(ids)
}
total_mathc = 0
for(ids in ranaids){
if(ids %in% mutationids){
total_mathc += 1
for(ids in ranaids){
if(ids %in% mutationids){
total_mathc = total_mathc+ 1
}
}
total_mathc
total_mathc = 0
for(ids in ranaids){
if(ids %in% transcriptids){
total_mathc = total_mathc+ 1
}
}
total_mathc
library(TCGAbiolinks)
library(dplyr)
library(maftools)
library(pheatmap)
library(SummarizedExperiment)
library(sesameData)
library(sesame)
query_mutation <- GDCquery(project = 'TCGA-SKCM',
data.category = 'Simple Nucleotide Variation',
data.type = "Masked Somatic Mutation",
access = 'open',
workflow.type = "Aliquot Ensemble Somatic Variant Merging and Masking")
output_mutation <- getResults(query_mutation)
View(output_mutation)
output_mutation %>% select(type) %>% table()
dim(output_mut)
dim(output_mutation)
query_mutation <- GDCquery(project = 'TCGA-SKCM',
data.category = 'Simple Nucleotide Variation',
access = 'open',
workflow.type = "Aliquot Ensemble Somatic Variant Merging and Masking")
output_mutation <- getResults(query_mutation)
View(output_mutation)
output_mutation %>% select(type) %>% table()
query <- GDCquery(project = "TCGA-SKCM")
results <- getResults(query)
# Clinical Data Download
query_clinical <- GDCquery(project = "TCGA-SKCM",
data.category  = "Clinical",
access = "open")
output_clinical <- getResults(query_clinical)
View(output_clinical)
GDCdownload(query_clinical)
# Clinical Data Download
query_clinical <- GDCquery(project = "TCGA-SKCM",
data.category  = "Clinical",
data.type = "Clinical Supplement",
file.type = "xml",
access = "open")
# Clinical Data Download
query_clinical <- GDCquery(project = "TCGA-SKCM",
data.category  = "Clinical",
data.type = "Clinical Supplement",
access = "open")
GDCdownload(query_clinical)
clinical.data <- GDCprepare_clinic(query_clinical, clinical.info = "patient")
# Clinical Data Download
query_clinical <- GDCquery(project = "TCGA-SKCM",
data.category  = "Clinical",
data.type = "Clinical Supplement",
data.format = "xml",
access = "open")
GDCdownload(query_clinical)
clinical.data <- GDCprepare_clinic(query_clinical, clinical.info = "patient")
getwd()
library(TCGAbiolinks)
library(dplyr)
library(maftools)
library(pheatmap)
library(SummarizedExperiment)
library(sesameData)
library(sesame)
# 2nd Clinical Data Download
clinical <- GDCquery_clinic(project = "TCGA-SKCM",
type = "clinical")
clinical %>%
head() %>%
DT::datatable(filter = "top",
options = list(scrollX = T, keys = T, pageLength = 5),
rownames = F)
class(clinical)
View(clinical)
# XML clinical data
query_clinical_xml <- GDCquery(project = "TCGA-SKCM",
data.category = 'Clinical',
file.type = "xml")
GDCdownload(clinical)
View(clinical)
?GDCquery
# XML clinical data: Not working
query_clinical_xml <- GDCquery(project = "TCGA-SKCM",
data.category = 'Clinical',
data.type = "xml")
# Tissue slid image (svs format)
query_clinical_image <- GDCquery(project = "TCGA-SKCM",
data.category = "Clinical",
data.type = "Tissue slide image",
legacy = T)
# Tissue slid image (svs format)
query_clinical_image <- GDCquery(project = "TCGA-SKCM",
data.category = "Clinical",
data.type = "Tissue slide image")
query <- GDCquery(project = "TCGA-COAD",
data.category = "Clinical",
data.type = "Tissue slide image",
legacy = TRUE,
barcode = c("TCGA-RU-A8FL","TCGA-AA-3972"))
query <- GDCquery(project = "TCGA-COAD",
data.category = "Clinical",
data.type = "Tissue slide image",
barcode = c("TCGA-RU-A8FL","TCGA-AA-3972"))
query <- GDCquery(project = "TCGA-COAD",
data.category = "Clinical",
data.type = "Clinical Supplement",
barcode = c("TCGA-RU-A8FL","TCGA-AA-3972"))
query <- GDCquery(project = "TCGA-COAD",
data.category = "Clinical",
data.type = "Clinical Supplement",
barcode = c("TCGA-RU-A8FL","TCGA-AA-3972"))
df <- getResults(query)
View(df)
installed.packages()["TCGAbiolinks", "Version"]
View(clinical)
write.csv(clinical, "/data/clinical_data.csv",row.names = F)
dir()
write.csv(clinical, "data/clinical_data.csv",row.names = F)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("rhdf5")
library(Seurat)
data <- Read10X_h5("./data/scRNA_Seq/sc5p_v2_hs_melanoma_10k_targeted_pan_cancer_filtered_feature_bc_matrix.h5")
h5_file <- H5File$new("./data/scRNA_Seq/sc5p_v2_hs_melanoma_10k_targeted_pan_cancer_filtered_feature_bc_matrix.h5")
BiocManager::install("hdf5r")
h5_file <- H5File$new("./data/scRNA_Seq/sc5p_v2_hs_melanoma_10k_targeted_pan_cancer_filtered_feature_bc_matrix.h5")
library(hdf5r)
h5_file <- H5File$new("./data/scRNA_Seq/sc5p_v2_hs_melanoma_10k_targeted_pan_cancer_filtered_feature_bc_matrix.h5")
print(h5_file)
matrix_data <- h5_file[["matrix/data"]][]
dim(matrix_data)
print(h5_file)
matrix_data <- h5_file[["matrix"]][]
matrix_data <- h5_file[["matrix"]][]
data <- Read10X_h5("./data/scRNA_Seq/sc5p_v2_hs_melanoma_10k_targeted_pan_cancer_filtered_feature_bc_matrix.h5")
seurat_obj <- CreateSeuratObject(counts = data)
seurat_obj
expr_matrix <- GetAssayData(seurat_obj, slot = "counts") # raw counts
expr_matrx2 <- as.matrix(expr_matrix)
view(expr_matrx2)
View(expr_matrx2)
meta_data <- seurat_obj@meta.data
meta_data
View(meta_data)
meta_data$cell_type
# Checking if the class contains
colnames(seurat_obj@meta.data)
View(meta_data)
# Meta datas
df2 <- read.csv("./data/scRNA_Seq/sc5p_v2_hs_melanoma_10k_targeted_pan_cancer_tc_barcode_summary.csv", header = T)
df3 <- read.csv("./data/scRNA_Seq/sc5p_v2_hs_melanoma_10k_targeted_pan_cancer_tc_feature_summary.csv", header = T)
View(df2)
View(df3)
dim(expr_matrx2)
